import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.aHVR0oKy.js";const E=JSON.parse('{"title":"Glicol DSL","description":"","frontmatter":{},"headers":[],"relativePath":"dsl.md","filePath":"dsl.md"}'),t={name:"dsl.md"},l=e('<h1 id="glicol-dsl" tabindex="-1">Glicol DSL <a class="header-anchor" href="#glicol-dsl" aria-label="Permalink to &quot;Glicol DSL&quot;">â€‹</a></h1><p>Under the hood, the JS style graph will be converted to Glicol&#39;s syntax for sending to the engine.</p><p>To learn more about this syntax, see:</p><p><a href="https://glicol.org" target="_blank" rel="noreferrer">https://glicol.org</a></p><p>After you are familiar with the syntax, you can write your audio graph logic like this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">glicol.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`o: saw 50 &gt;&gt; lpf 300.0 1.0`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>You can call the <code>run</code> again if you want to change some parameters. There won&#39;t be an update to the whole graph. Instead, the Glicol Rust engine will be smart enough to tell the difference and only update where is modified.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">glicol.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`o: saw 50 &gt;&gt; lpf 300.0 1.0`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Another way is to send message to the engine:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// chain &quot;o&quot;, node_index 0, param 0, set to 110</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">glicol.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`o, 0, 0, 110`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>You can use it with GUI, see this example:</p><p><a href="https://glicol-npm.netlify.app" target="_blank" rel="noreferrer">https://glicol-npm.netlify.app</a></p><p>Multiple message in one String is also possible.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">glicol.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`o, 0, 0, 110; o, 1, 0, 500; o, 1, 1, 0.8`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',14),n=[l];function p(h,o,d,r,c,k){return a(),i("div",null,n)}const u=s(t,[["render",p]]);export{E as __pageData,u as default};
